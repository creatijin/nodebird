{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/joseungjin/Documents/dev/creatijin/nodebird/prepare/front/components/postCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport PropType from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { Card, Popover, Button, Avatar } from \"antd\";\nimport PostImages from \"../components/PostImages\";\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from \"@ant-design/icons\";\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      liked = _useState[0],\n      setLiked = _useState[1];\n\n  var _useState2 = useState(false),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var onToggleLike = useCallback(function () {\n    setLiked(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []); // const { me } = useSelector((state) => state.user);\n  // const id = me && me.id;\n  // 옵셔널 체이닝(optional chaining ) 연산자\n  // const id = me?.id;\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(Card, {\n    cover: post.Images && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 33\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneClolor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 23\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 23\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }))],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 31\n    }\n  }, \"\\uB313\\uAE00\\uBD80\\uBD84\")));\n};\n\n_s(PostCard, \"qjo02WruhXZcdwWdlG/xwVw2yKY=\", false, function () {\n  return [useSelector];\n});\n\n_c = PostCard;\nPostCard.propTypes = {\n  post: PropType.shape({\n    id: PropType.number,\n    User: PropType.object,\n    content: PropType.string,\n    createdAt: PropType.object,\n    Comment: PropType.arrayOf(PropType.object),\n    images: PropType.arrayOf(PropType.object)\n  }).isRequired\n};\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["/Users/joseungjin/Documents/dev/creatijin/nodebird/prepare/front/components/postCard.js"],"names":["React","useState","useCallback","PropType","useSelector","Card","Popover","Button","Avatar","PostImages","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","id","state","user","me","marginBottom","Images","User","nickname","content","propTypes","shape","number","object","string","createdAt","Comment","arrayOf","images","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport PropType from \"prop-types\";\nimport { useSelector } from \"react-redux\";\nimport { Card, Popover, Button, Avatar } from \"antd\";\nimport PostImages from \"../components/PostImages\";\nimport {\n  RetweetOutlined,\n  HeartOutlined,\n  MessageOutlined,\n  EllipsisOutlined,\n  HeartTwoTone,\n} from \"@ant-design/icons\";\n\nconst PostCard = ({ post }) => {\n  const [liked, setLiked] = useState(false);\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const onToggleLike = useCallback(() => {\n    setLiked((prev) => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened((prev) => !prev);\n  }, []);\n  // const { me } = useSelector((state) => state.user);\n  // const id = me && me.id;\n  // 옵셔널 체이닝(optional chaining ) 연산자\n  // const id = me?.id;\n  const id = useSelector((state) => state.user.me?.id);\n  return (\n    <>\n      <div style={{ marginBottom: 20 }}>\n        <Card\n          cover={post.Images && <PostImages images={post.Images} />}\n          actions={[\n            <RetweetOutlined key=\"retweet\" />,\n            liked ? (\n              <HeartTwoTone\n                twoToneClolor=\"#eb2f96\"\n                key=\"heart\"\n                onClick={onToggleLike}\n              />\n            ) : (\n              <HeartOutlined key=\"heart\" />\n            ),\n            <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n            <Popover\n              key=\"more\"\n              content={\n                <Button.Group>\n                  {id && post.User.id === id ? (\n                    <>\n                      <Button>수정</Button>\n                      <Button type=\"danger\">삭제</Button>\n                    </>\n                  ) : (\n                    <Button>신고</Button>\n                  )}\n                </Button.Group>\n              }\n            >\n              <EllipsisOutlined />\n            </Popover>,\n          ]}\n        >\n          <Card.Meta\n            avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n            title={post.User.nickname}\n            description={post.content}\n          />\n        </Card>\n        {commentFormOpened && <div>댓글부분</div>}\n      </div>\n    </>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropType.shape({\n    id: PropType.number,\n    User: PropType.object,\n    content: PropType.string,\n    createdAt: PropType.object,\n    Comment: PropType.arrayOf(PropType.object),\n    images: PropType.arrayOf(PropType.object),\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}